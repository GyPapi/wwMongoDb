<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Westwind.Data.MongoDb</name>
    </assembly>
    <members>
        <member name="T:Westwind.Data.MongoDb.MongoDbDataAccess">
            <summary>
            A non-generic version of the Mongo data access component that requires explicitly
            specifying result entity types and use of string based entity inputs.
            </summary>
        </member>
        <member name="T:Westwind.Data.MongoDb.MongoDbDataAccess`1">
            <summary>
            A light wrapper around the MongoDb API to provide for easy queries
            and Save operations.    
            </summary>
            <typeparam name="TEntity">
            The type of an optional entity that various queries can project
            results into. this is mainly a convenience parameter that removes
            the need to specify a generic type for each operation.
            </typeparam>
        </member>
        <member name="M:Westwind.Data.MongoDb.MongoDbDataAccess`1.#ctor(System.String,System.String,System.String)">
            <summary>
            Base constructor using default behavior loading context by 
            connectionstring name.
            </summary>
            <param name="connectionString">Connection string name</param>
        </member>
        <member name="M:Westwind.Data.MongoDb.MongoDbDataAccess`1.GetDatabase(System.String,System.String)">
            <summary>
            Creates a connection to a databaseName based on the Databasename and 
            optional server connection string.
            
            Returned Mongo DatabaseName 'connection' can be cached and reused.
            </summary>
            <param name="connectionString">Mongo server connection string.
            Can either be a connection string entry name from the ConnectionStrings
            section in the config file or a full server string.        
            If not specified looks for connectionstring entry in  same name as
            the context. Failing that mongodb://localhost is used.
             
            Examples:
            MyDatabaseConnectionString   (ConnectionStrings Config Name)       
            mongodb://localhost
            mongodb://localhost:22011/MyDatabase
            mongodb://username:password@localhost:22011/MyDatabase        
            </param>        
            <param name="databaseName">Name of the databaseName to work with if not specified on the connection string</param>
            <returns>Database instance</returns>
        </member>
        <member name="M:Westwind.Data.MongoDb.MongoDbDataAccess`1.GetDatabase(System.String,System.String,System.String)">
            <summary>
            Specialized CreateContext that accepts a connection string and provider.
            Creates a new context based on a Connection String name or
            connection string.
            </summary>
            <param name="connectionString"></param>
            <returns></returns>
            <remarks>Important: 
            This only works if you implement a DbContext contstructor on your custom context
            that accepts a connectionString parameter.
            </remarks>
        </member>
        <member name="M:Westwind.Data.MongoDb.MongoDbDataAccess`1.Initialize">
            <summary>
            Override to hook post Context intialization
            Fired by all constructors.
            </summary>
        </member>
        <member name="M:Westwind.Data.MongoDb.MongoDbDataAccess`1.InitializeInternal">
            <summary>
            Internal common pre-Context creation initialization code
            fired by all constructors
            </summary>
        </member>
        <member name="M:Westwind.Data.MongoDb.MongoDbDataAccess`1.FindOne(MongoDB.Driver.IMongoQuery,System.String)">
            <summary>
            Finds an individual entity based on the entity tyep
            of this application.
            </summary>
            <param name="query"></param>
            <param name="collectionName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Data.MongoDb.MongoDbDataAccess`1.FindOne``1(MongoDB.Driver.IMongoQuery,System.String)">
            <summary>
            Finds an individual entity based on the entity type passed in
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="collectionName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Data.MongoDb.MongoDbDataAccess`1.FindOneFromString(System.String,System.String)">
            <summary>
            Allows you to query for a single entity  using a Mongo Shell query 
            string. Uses the default entity defined.
            </summary>
            <param name="jsonQuery">Json object query string</param>
            <param name="collectionName">Optional - name of the collection to search</param>
            <returns>Collection of items or null if none</returns>
        </member>
        <member name="M:Westwind.Data.MongoDb.MongoDbDataAccess`1.FindOneFromString``1(System.String,System.String)">
            <summary>
            Allows you to query for a single entity  using a Mongo Shell query 
            string. Uses the entity type passed.
            </summary>
            <param name="jsonQuery">Json object query string</param>
            <param name="collectionName">Optional - name of the collection to search</param>
            <returns>Collection of items or null if none</returns>
        </member>
        <member name="M:Westwind.Data.MongoDb.MongoDbDataAccess`1.FindOneFromStringJson(System.String,System.String)">
            <summary>
            Allows you to query for a single entity  using a Mongo Shell query 
            string. Uses the entity type passed.
            </summary>
            <param name="jsonQuery">Json object query string</param>
            <param name="collectionName">Optional - name of the collection to search</param>
            <returns>Collection of items or null if none</returns>
        </member>
        <member name="M:Westwind.Data.MongoDb.MongoDbDataAccess`1.FindFromString``1(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Allows you to query Mongo using a Mongo Shell query 
            string and explicitly specify the result type.
            </summary>
            <param name="jsonQuery">Json object query string</param>
            <param name="collectionName">Optional - name of the collection to search</param>
            <returns>Collection of items or null if none</returns>    
        </member>
        <member name="M:Westwind.Data.MongoDb.MongoDbDataAccess`1.FindFromStringJson(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Allows you to query Mongo using a Mongo Shell query 
            string.
            </summary>
            <param name="jsonQuery">Json object query string</param>
            <param name="collectionName">Optional - name of the collection to search</param>
            <returns>Collection of items or null if none</returns>
        </member>
        <member name="M:Westwind.Data.MongoDb.MongoDbDataAccess`1.FindFromObject(System.Object,System.String)">
            <summary>
            Allows you to query Mongo using a Mongo Shell query 
            by providing a .NET object that is translated into
            the appropriate JSON/BSON structure. 
            
            This might be easier to write by hand than JSON strings
            in C# code.
            </summary>
            <param name="queryObject">Any .NET object that conforms to Mongo query object structure</param>
            <param name="collectionName">Optional - name of the collection to search</param>
            <returns>Collection of items or null if none</returns>
        </member>
        <member name="M:Westwind.Data.MongoDb.MongoDbDataAccess`1.FindFromObject``1(System.Object,System.String)">
            <summary>
            Allows you to query Mongo using a Mongo Shell query 
            by providing a .NET object that is translated into
            the appropriate JSON/BSON structure. This version
            allows you to specify the result type explicitly.
            
            This might be easier to write by hand than JSON strings
            in C# code.
            </summary>
            <param name="queryObject">Any .NET object that conforms to Mongo query object structure</param>
            <param name="collectionName">Optional - name of the collection to search</param>
            <returns>Collection of items or null if none</returns>
        </member>
        <member name="M:Westwind.Data.MongoDb.MongoDbDataAccess`1.GetQueryFromString(System.String)">
            <summary>
            Creates a Bson Query document from a Json String.
            
            You can pass this as a Query operation to any of the
            Collection methods that expect a query.
            </summary>
            <param name="jsonQuery"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Data.MongoDb.MongoDbDataAccess`1.Load(System.String)">
            <summary>
            Loads in instance based on its string id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Data.MongoDb.MongoDbDataAccess`1.Load(System.Int32)">
            <summary>
            Loads in instance based on its string id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Data.MongoDb.MongoDbDataAccess`1.LoadBase(System.String)">
            <summary>
            Loads an instance based on its key field id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Data.MongoDb.MongoDbDataAccess`1.LoadBase(System.Int32)">
            <summary>
            Loads an instance based on its key field id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Data.MongoDb.MongoDbDataAccess`1.LoadBase(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Loads an entity based on a Lambda expression
            </summary>
            <param name="whereClauseLambda"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Data.MongoDb.MongoDbDataAccess`1.LoadJson(System.String,System.String)">
            <summary>
            Loads an entity by ID and returns a JSON string
            </summary>
            <param name="id">string id</param>
            <param name="collection">Name of the collection to access</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Data.MongoDb.MongoDbDataAccess`1.LoadJson(System.Int32,System.String)">
            <summary>
            Loads an entity and returns a JSON string
            </summary>
            <param name="id">A string ID or Object Id value to look up</param>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Data.MongoDb.MongoDbDataAccess`1.Delete(`0)">
            <summary>
            removes an individual entity instance.
            
            This method allows specifying an entity in a dbSet other
            then the main one as long as it's specified by the dbSet
            parameter.
            </summary>
            <param name="entity"></param>
            <param name="dbSet">Optional - 
            Allows specifying the Collection to which the entity passed belongs.
            If not specified the current Collection for the current entity is used </param>
            <param name="saveChanges">Optional - 
            If true does a Context.SaveChanges. Set to false
            when other changes in the Context are pending and you don't want them to commit
            immediately
            </param>
            <param name="noTransaction">Optional - 
            If true the Delete operation is wrapped into a TransactionScope transaction that
            ensures that OnBeforeDelete and OnAfterDelete all fire within the same Transaction scope.
            Defaults to false as to improve performance.
            </param>
        </member>
        <member name="M:Westwind.Data.MongoDb.MongoDbDataAccess`1.Delete(System.String,System.String)">
            <summary>
            Deletes an entity from the main entity set
            based on a key value.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Data.MongoDb.MongoDbDataAccess`1.DeleteFromString(System.String,System.String)">
            <summary>
            Deletes Entities based on a filter expression
            </summary>
            <param name="filterJson"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Data.MongoDb.MongoDbDataAccess`1.DeleteInternal(`0)">
            <summary>
            Actual delete operation that removes an entity
            </summary>
        </member>
        <member name="M:Westwind.Data.MongoDb.MongoDbDataAccess`1.Save(`0,System.String)">
            <summary>
            Saves all changes. 
            </summary>
            <remarks>
            This method calls Context.SaveChanges() so it saves
            all changes made in the context not just changes made
            to the current entity. It's crucial to Save() as
            atomically as possible or else use separate Business
            object instances with separate contexts.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Westwind.Data.MongoDb.MongoDbDataAccess`1.Save``1(``0,System.String)">
            <summary>
            Saves an entity based on a provided type.
            </summary>
            <remarks>
            This version of Save() does not run Validation, or
            before and after save events since it's not tied to
            the current entity type. If you want the full featured
            save use the non-generic Save() operation.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Westwind.Data.MongoDb.MongoDbDataAccess`1.SaveFromJson(System.String,System.String)">
            <summary>
            Saves 
            </summary>
            <param name="entity"></param>
            <param name="collectionName"></param>
            <returns>Id of object saved</returns>
        </member>
        <member name="M:Westwind.Data.MongoDb.MongoDbDataAccess`1.GetCollection(System.String)">
            <summary>
            Returns a Collection
            </summary>
            <param name="collectionName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Data.MongoDb.MongoDbDataAccess`1.GetDatabase">
            <summary>
            Returns the database instance so you can run commands off of it
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Data.MongoDb.MongoDbDataAccess`1.GenerateNewId">
            <summary>
            Generates a new Bson Id and returns it as a string.
            This function can be used by non-.NET clients/APIs
            that only work with string values.
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Westwind.Data.MongoDb.MongoDbDataAccess`1.SetError(System.String)">
            <summary>
            Sets an internal error message.
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Westwind.Data.MongoDb.MongoDbDataAccess`1.SetError(System.Exception,System.Boolean)">
            <summary>
            Sets an internal error exception
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:Westwind.Data.MongoDb.MongoDbDataAccess`1.SetError">
            <summary>
            Clear out errors
            </summary>
        </member>
        <member name="M:Westwind.Data.MongoDb.MongoDbDataAccess`1.ToString">
            <summary>
            Overridden to display error messages if one exists
            </summary>
            <returns></returns>
        </member>
        <member name="P:Westwind.Data.MongoDb.MongoDbDataAccess`1.Database">
            <summary>
            Instance of the MongoDb core database instance.
            Set internally when the driver is initialized.
            </summary>
        </member>
        <member name="P:Westwind.Data.MongoDb.MongoDbDataAccess`1.ConnectionString">
            <summary>
            ConnectionString to the database
            </summary>
        </member>
        <member name="P:Westwind.Data.MongoDb.MongoDbDataAccess`1.DatabaseName">
            <summary>
            Name of the database that this instance is connected to
            </summary>
        </member>
        <member name="P:Westwind.Data.MongoDb.MongoDbDataAccess`1.CollectionName">
            <summary>
            Name of the default collection associated with the Entity
            Used internally to dynamically retrieve the collection at
            runtime.
            </summary>
        </member>
        <member name="P:Westwind.Data.MongoDb.MongoDbDataAccess`1.Collection">
            <summary>
            Re-usable MongoDb Collection instance.
            Set internally when the driver is initialized
            and accessible after that.
            </summary>
        </member>
        <member name="P:Westwind.Data.MongoDb.MongoDbDataAccess`1.ErrorMessage">
            <summary>
            Error Message set by the last operation. Check if 
            results of a method call return an error status.
            </summary>
        </member>
        <member name="P:Westwind.Data.MongoDb.MongoDbDataAccess`1.ErrorException">
            <summary>
            Instance of an exception object that caused the last error
            </summary>
        </member>
        <member name="T:Westwind.Data.MongoDb.Pluralizer">
            <summary>
            Overly simplistic pluralizer that is used
            to pluralize words by appending an s to the
            name and add additional words via dictionary
            overrides
            </summary>
        </member>
        <member name="T:Westwind.Data.MongoDb.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Westwind.Data.MongoDb.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Westwind.Data.MongoDb.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Westwind.Data.MongoDb.Properties.Resources.CouldntLoadEntityInvalidKeyProvided">
            <summary>
              Looks up a localized string similar to Couldn&apos;t load Entity - invalid key provided..
            </summary>
        </member>
    </members>
</doc>
